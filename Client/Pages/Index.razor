@page "/"
@using Model
@using System.Text.Json
@inject IHttpClientFactory Http

<PageTitle>Index</PageTitle>

<div >
    <EditForm Model="formItems" OnValidSubmit="SendForm">                    
        @foreach (var item in formItems)
        {
            switch(item.Title)
            {
                case "Date":
                    <label>
                        Date.                       
                    </label>
                    var dateRes = Convert.ToDateTime(item.Value.ToString());
                    <input type="date" class="form-control input-required" @bind-value="dateRes" @bind-value:event="oninput" @onchange="() => {item.Value = dateRes;}"></input>
                    break;
                case "TextInput":
                    <label>
                        Text.
                    </label>
                    var textRes = item.Value.ToString();
                    <input type="text" class="form-control input-required" @bind-value="textRes" @bind-value:event="oninput" @onchange="() => { item.Value =textRes ;}"></input>
                    break;
                case "RadioButton":
                    <label>
                        Radio.
                    </label>
                    var radioRes = Convert.ToBoolean(item.Value.ToString());
                    <div>
                        <input type="checkbox" @oninput="() => { item.Value = true;}">
                        <input type="checkbox" @oninput="() => { item.Value = false;}">                       
                    </div>
                    break;
            }
        }       
        <button type="submit">Submit</button>
        <div>@MyProperty</div>
    </EditForm>
</div>
@code{
    List<FormType<object>> formItems = new();

    public bool MyProperty { get; set; }           
    protected override async void OnInitialized()
    {
        var request = Http.CreateClient();
        string path = Path.Combine("https://localhost:44363/", "WeatherForecast");
        var responce = await request.GetAsync(path);        
        var result = await responce.Content.ReadFromJsonAsync<List<object>>();

        AddFormItem(result);
        InvokeAsync(StateHasChanged);
    }

    async Task SendForm()
    {
        var request = Http.CreateClient();
        string path = Path.Combine("https://localhost:44363/", "WeatherForecast", "PostForm");
        var options = new JsonSerializerOptions
            {
                PropertyNameCaseInsensitive = true
            };
        var responce = await request.PostAsJsonAsync(path, formItems, options);
    }
    void AddFormItem(List<object> formTypes)
    {
        foreach (var item in formTypes)
            formItems.Add(JsonSerializer.Deserialize<FormType<object>>(item.ToString()));        
    }   
}